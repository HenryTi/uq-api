FUNC RootPhrase(
    phrase ID,
) RETURNS ID {
    VAR rootPhrase ID=phrase, parentPhrase ID;
    WHILE 1=1 {
        SET parentPhrase=a.i FROM IxPhrase as a WHERE a.x=rootPhrase;
        IF parentPhrase IS NULL OR parentPhrase<=0 {break;}
        SET rootPhrase=parentPhrase;
    }
    RETURN rootPhrase;
}

FUNC SeedAtom(fork ID)
RETURNS ID {
    VAR seed ID = IFNULL(a.seed, a.id) FROM IDU as a WHERE a.id=fork;
    RETURN seed;
}

Biz Query GetIDList (
    phrase ID,          -- ID prhase
    tie ID,             -- tie ID, or index bud 
    i ID,               -- i value id
    searchKey CHAR,
)
PAGE (
    id ID ASC,
    phrase ID,
    seed ID,
)
RETURNS props (
    id ID,
    bud ID,
    value JSON,
    (id, bud) KEY,
)
RETURNS atoms (
    id ID,
    phrase ID,
    no NO,
    ex EX,
    (id) KEY,
)
RETURNS forks (
    id ID,
    phrase ID,
    seed ID,
    (id) KEY,
) {
    VAR bizPhraseType ENUM BizPhraseType = a.type FROM BizPhrase as a WHERE a.id=phrase;
    VAR rootPhrase ID=RootPhrase(phrase);

    TABLE idtable (KEY id ID, phrase ID, seed ID, show TINYINT);
    IF tie IS NOT NULL {
        IF bizPhraseType=BizPhraseType.atom {
            PAGE SELECT a.x as id, b.base as phrase, b.seed
                FROM Ix as a
                    LEFT JOIN IDU as b ON b.id=a.x
                    LEFT JOIN Atom as c ON c.id=b.id
                WHERE a.i=BudID(tie, i) AND a.x>$pageStart AND SEARCH(c.no, c.ex LIKE searchKey)
                ORDER BY a.x ASC
                LIMIT $pageSize;
        }
        ELSE {
            PAGE SELECT a.x as id, b.base as phrase, b.seed
                FROM Ix as a
                    LEFT JOIN IDU as b ON b.id=a.x
                WHERE a.i=BudID(tie, i) AND a.x>$pageStart
                ORDER BY a.x ASC
                LIMIT $pageSize;
        }
    }
    ELSE {
        IF bizPhraseType=BizPhraseType.atom {
            /*
            PAGE WITH RECURSIVE pPhrase AS (
                SELECT r.i, r.x
                FROM -- idtable as s
                    -- JOIN 
                    IxPhrase as r -- ON r.x=s.phrase
                    JOIN XBiz as p1 ON p1.id=r.x
                WHERE r.x=phrase -- AND p.valid=1
                UNION
                SELECT b.i, b.x
                FROM pPhrase AS a 
                    JOIN IxPhrase as b ON a.x=b.i
                    JOIN XBiz AS p2 ON p2.id=b.x
            )
            SELECT c.id as id, c.base as phrase
                FROM Atom as c JOIN pPhrase as p ON c.base=p.x
                WHERE c.id>$pageStart AND SEARCH(c.no, c.ex LIKE searchKey)
                ORDER BY c.id ASC
                LIMIT $pageSize;
            */
            IF searchKey IS NULL OR searchKey='' {
                PAGE SELECT c.id as id, a.base as phrase, a.seed
                    FROM IDU as a JOIN Atom as c ON c.id=a.id AND a.base=phrase AND c.base=rootPhrase
                    WHERE c.id>$pageStart
                    ORDER BY c.id ASC
                    LIMIT $pageSize;
            }
            ELSE {
                PAGE SELECT c.id as id, a.base as phrase, a.seed
                    FROM IDU as a JOIN Atom as c ON c.id=a.id AND a.base=phrase AND c.base=rootPhrase
                    WHERE c.id>$pageStart AND SEARCH(c.no, c.ex LIKE searchKey)
                    ORDER BY c.id ASC
                    LIMIT $pageSize;
            }
        }
        ELSEIF bizPhraseType=BizPhraseType.fork {
            PAGE SELECT d.id as id, d.base as phrase, d.seed
                FROM IDU as d
                WHERE d.base=phrase AND d.id>$pageStart
                ORDER BY d.id ASC
                LIMIT $pageSize;
        }
    }
    
    INTO idtable SELECT id, phrase, seed, 1 as show FROM $page;
    PROC ProcPropsOfIds();
}

PROC ProcPropsOfIds()
RETURNS idtable VIRTUAL (
    id ID,
    phrase ID,
    seed ID,
    show TINYINT,       -- 1: add showBuds
)
RETURNS props VIRTUAL (
    id ID,
    bud ID,
    value JSON,
    (id, bud) KEY,
)
RETURNS atoms VIRTUAL (
    id ID,
    phrase ID,
    no NO,
    ex EX,
    (id) KEY,
)
RETURNS forks VIRTUAL (
    id ID,
    phrase ID,
    seed ID,
    (id) KEY,
)
{
    TABLE ForkIdTable (KEY id ID,phrase ID,seed ID);
    -- 暂时先3层fork吧，按理说应该是递归的
    INTO IGNORE ForkIdTable 
        SELECT a.id, a.phrase, a.seed FROM IdTable as a 
        WHERE a.seed>0;
    INTO IGNORE ForkIdTable 
        SELECT b.id, b.base as phrase, b.seed
            FROM IdTable as a JOIN IDU as b ON b.id=a.seed
        WHERE b.seed>0;
    INTO IGNORE ForkIdTable 
        SELECT c.id, c.base as phrase, c.seed
            FROM IdTable as a 
                JOIN IDU as b ON b.id=a.seed
                JOIN IDU as c ON c.id=b.seed
        WHERE c.seed>0;
    INTO IGNORE IdTable SELECT b.id, b.base as phrase, b.seed, 1 as show
        FROM ForkIdTable as a JOIN IDU as b ON b.id=a.seed;
    /-mysql
    INSERT INTO _idtable (id, phrase, seed, `show`)
        SELECT a.id, a.phrase, a.seed, 1 FROM _forkidtable as a
        ON DUPLICATE KEY UPDATE `show`=1;
    -/

    TABLE PhraseBuds(KEY phrase BIGINT, KEY bud BIGINT);
    INTO IGNORE PhraseBuds WITH RECURSIVE pPhrase AS (
        SELECT s.phrase, r.x as id, r.i as base
        FROM idtable as s
            JOIN IxPhrase as r ON r.x=s.phrase
            JOIN XBiz as p1 ON p1.id=r.x
        WHERE s.show=1
        UNION
        SELECT b.phrase, a.x as id, a.i as base
        FROM IxPhrase as a JOIN pPhrase AS b
            ON b.base=a.x
    )
    SELECT c.phrase as phrase, d.x as bud
        FROM pPhrase as c
            JOIN BizBudShow as d ON d.i=c.id;

    -- 必显示字段可能有atom，取出no，ex
    INTO IGNORE atoms SELECT d.id, d.base as phrase, e.no, e.ex
        FROM idtable as a
            JOIN PhraseBuds as b ON b.phrase=a.phrase
            JOIN IxInt as c ON c.i=a.id AND c.x=b.bud
            JOIN IDU as d ON d.id=c.value
            JOIN Atom as e ON e.id=d.id
        WHERE a.show=1;
    -- 这个id对应的必显示字段，比如sheet或atom的bizbudshow
    INTO IGNORE props SELECT a.id, c.x as bud, CAST(c.value as JSON) as value
        FROM idtable as a
            JOIN PhraseBuds as b ON b.phrase=a.phrase
            JOIN IxInt as c ON c.i=a.id AND c.x=b.bud
        WHERE a.show=1;
    INTO IGNORE props SELECT a.id, c.x as bud, CAST(c.value as JSON) as value
        FROM idtable as a
            JOIN PhraseBuds as b ON b.phrase=a.phrase
            JOIN IxDec as c ON c.i=a.id AND c.x=b.bud
        WHERE a.show=1;
    INTO IGNORE props SELECT a.id, c.x as bud, JSON_QUOTE(c.value) as value
        FROM idtable as a
            JOIN PhraseBuds as b ON b.phrase=a.phrase
            JOIN IxStr as c ON c.i=a.id AND c.x=b.bud
        WHERE a.show=1;
    INTO IGNORE props SELECT c.ii as id, c.i as bud, JSON_ARRAYAGG(c.x) as value
        FROM idtable as a
            JOIN PhraseBuds as b ON b.phrase=a.phrase
            JOIN IxCheck as c ON c.ii=a.id AND c.i=b.bud
        WHERE a.show=1
        GROUP BY c.ii, c.i;

    -- id 对应的atoms or fork
    INTO IGNORE atoms SELECT c.id, d.base as phrase, c.no, c.ex
        FROM idtable as a
            JOIN Atom as c ON c.id=a.seed
            JOIN IDU as d ON d.id=c.id
        WHERE a.seed>0;
    INTO IGNORE atoms SELECT c.id, a.phrase, c.no, c.ex
        FROM idtable as a
            JOIN Atom as c ON c.id=a.id
        WHERE a.seed IS NULL;
    INTO IGNORE forks SELECT a.id, a.phrase, a.seed
        FROM ForkIdTable as a;
}

Biz Query GetIDListCount(
    phrase ID,          -- ID prhase
) 
RETURNS ret (
    count INT,
) {
    INTO ret SELECT count(*) as count FROM Atom as a WHERE a.base=phrase;
}

Biz AC SetIDBase (
    id ID,
    base ID,
) {
    WITH Atom ID=id SET base=base;
}
